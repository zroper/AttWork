function [pointList]=createPoints(boundsList, centerPoint, minDist, distFromCenter, maxTries)%[pointList]=createPoints(boundsList, centerPoint, minDist, distFromCenter, maxTries)%creates a list of points that are all a minimum distance apart, and a minumum distance from%the center of the screen%boundsList - list of the boundaries for each point needed, must have a list of four items %for each point that you would like chosen%the list should take the form {left, top, right, bottom}%centerPoint - center of the screen%minDist - minimum distance between any two points%distFromCenter - minimum distance from the center%maxTries - stops trying to find a valid point after this many tries% test values: to choose 4 points with x values between 220 and 420 and y values between%140 and 340, use the following call%mybounds = [220 140 420 340]%pointsList = [mybounds; mybounds; mybounds; mybounds]%myCenter = [320 240] %if screen resolution is 640 x 480%minimumDistance = 20%minCenterDist = 20%max = 300% myListofPoints = createPoints(pointsList, myCenter, minimunDistance, minCenterDist, max);% use of this function requires 3 other functions: checkDistance, getDistance, randIntnumPoints = size(boundsList);numPoints = numPoints(1);pointList = [];newPoint = zeros(1,2);pointList(1,:) = centerPoint;numTries = 0;numResets = 0;N = 2;M = 1;while size(pointList,1) < (numPoints + 1)	isFarEnough = 0;	while numTries <= maxTries		numTries = numTries + 1;		mybounds = boundsList(M,:);		myleft = mybounds(1);		mytop = mybounds(2);		myright = mybounds(3);		mybottom = mybounds(4);		newX = randInt(myleft, myright);		newY = randInt(mytop, mybottom);		newPoint = [newX newY];		isFarEnough = checkDistance(minDist, distFromCenter, pointList, newPoint);		if isFarEnough == 1			break		end	end	if numTries > maxTries		if numResets > maxTries			error('Cannot satisfy position constraints')		else			pointList = zeros((numPoints + 1),2);			pointList(1,:) = centerPoint;			numResets = numResets + 1;		end	else		pointList(N,:) = newPoint;		numTries = 0;		numResets = 0;	end	N = N + 1;	M = M + 1;endpointList = pointList(2:(numPoints+1),:);